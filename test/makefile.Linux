# 此文件由makelocal.sh自动生成
# 此文件由makeobj.sh自动生成
############################################################
# 项目名 : 
# 模块名 : 
# 备  注 : 
############################################################

###### 源文件配置区
# 编译宏
AR		=	ar
AFLAGS		=	rv
SOFLAGS		=	-shared
ESOFLAGS	=	

# c源代码文件宏及推导规则
CC		=	gcc -g -fPIC -O2 -Wall -Werror -fno-strict-aliasing
CC_NOWARN	=	gcc -g -fPIC -O2

c_FILE_o	=	$(c_FILE:.c=.o)
c_FILE2_o	=	$(c_FILE2:.c=.o)
c_FILE3_o	=	$(c_FILE3:.c=.o)
c_FILE4_o	=	$(c_FILE4:.c=.o)
c_FILE5_o	=	$(c_FILE5:.c=.o)
c_FILE_CLEAN	=	$(c_FILE_o) $(c_FILE2_o) $(c_FILE3_o) $(c_FILE4_o) $(c_FILE5_o)

.SUFFIXES:.c
.c.o	:
	$(CC) $(CFLAGS) -c $<

c_FILE		=	\
			IDL_AllTypes.dsc.c		\
			IDL_AllTypes2.dsc.c		\
			IDL_CommHead.dsc.c		\
			IDL_ResponseHeader.dsc.c	\
			IDL_BankTransaction.dsc.c	\
			IDL_BankXmlTransaction.dsc.c	\
			IDL_BankJsonTransaction.dsc.c	\
			test_netorder.c			\
			test_serialize_compact.c	\
			test_serialize_compress.c	\
			test_serialize_compress_press.c	\
			test_trans.c			\
			test_serialize_xml.c		\
			test_serialize_json.c		\
			test_serialize_json_utf8.c	\
			press_deserialize_json.c	\

###### 目标文件、安装目录配置区
BIN		=	test_netorder			\
			test_serialize_compact		\
			test_serialize_compress		\
			test_serialize_compress_press	\
			test_trans			\

###### 编译选项
CFLAGS		=	-I. \
			-I/usr/local/include/fasterxml	\
			-I/usr/local/include/fasterjson	\

###### 链接选项
LFLAGS		=	-L. \

###### 额外宏定义区
CLEAN_ADDITION	=

###### 加载mktpl模板库
# 最终目标列表
all	:	$(OBJ) $(OBJ2) $(LIB) $(LIB2) $(SQL) $(NOCLEAN_OBJ) $(NOINST_OBJ) $(BIN) $(BIN2)

# 文件系统宏
CD		=	cd
RM		=	rm -f
CP		=	cp -f
MV		=	mv -f
MKDIR		=	mkdir -p

# 预定义源文件清理删除关联宏
_FILE_CLEAN	=	$(c_FILE_CLEAN) $(cpp_FILE_CLEAN) $(SQC_FILE_CLEAN) $(csm_FILE_CLEAN) $(c_html_FILE_CLEAN) $(cui_FILE_CLEAN) $(dtd_FILE_CLEAN) $(prt_FILE_CLEAN) $(fmd_FILE_CLEAN) $(smd_FILE_CLEAN) $(def_FILE_CLEAN) $(act_FILE_CLEAN) $(sml2c_FILE_CLEAN)

# 清理删除规则
.PHONY:clean
clean		:
	@for FILE in $(_FILE_CLEAN) $(BIN) $(BIN2) $(LIB) $(LIB2) $(OBJ) $(OBJ2) $(NOINST_OBJ) $(CLEAN_ADDITION) ; do \
		echo $(RM) $$FILE ; \
		$(RM) $$FILE ; \
	done


# 预定义源代码缺省头文件宏
DFTHDER		=	$(csm_FILE_DFTHDER) $(cui_FILE_DFTHDER) $(dtd_FILE_DFTHDER) $(prt_FILE_DFTHDER) $(fmd_FILE_DFTHDER) $(smd_FILE_DFTHDER) $(def_FILE_DFTHDER) $(act_FILE_DFTHDER) $(sml2c_FILE_DFTHDER)

# 提交安装规则
.PHONY:install
install		:	all

ifneq ($(strip $(BIN)),)
ifneq ($(strip $(BININST)),)
	@if [ ! -d "$(BININST)" ] ; then \
		echo $(MKDIR) $(BININST) ; \
		$(MKDIR) $(BININST) ; \
	fi ; \
	for FILE in `echo $(BIN)` ; do \
		echo $(CP) $$FILE $(BININST)/ ; \
		$(RM) $(BININST)/$$FILE ; \
		$(CP) $$FILE $(BININST)/ ; \
	done
endif
endif

ifneq ($(strip $(HDER)),)
ifneq ($(strip $(HDERINST)),)
	@if [ ! -d "$(HDERINST)" ] ; then \
		echo $(MKDIR) $(HDERINST) ; \
		$(MKDIR) $(HDERINST) ; \
	fi ; \
	for FILE in `echo $(HDER)` ; do \
		echo $(CP) $$FILE $(HDERINST)/ ; \
		$(RM) $(HDERINST)/$$FILE ; \
		$(CP) $$FILE $(HDERINST)/ ; \
	done
endif
endif

ifneq ($(strip $(DFTHDER)),)
ifneq ($(strip $(DFTHDERINST)),)
	@if [ ! -d "$(DFTHDERINST)" ] ; then \
		echo $(MKDIR) $(DFTHDERINST) ; \
		$(MKDIR) $(DFTHDERINST) ; \
	fi ; \
	for FILE in `echo $(DFTHDER)` ; do \
		echo $(CP) $$FILE $(DFTHDERINST)/ ; \
		$(RM) $(DFTHDERINST)/$$FILE ; \
		$(CP) $$FILE $(DFTHDERINST)/ ; \
	done
endif
endif



###### 目标文件依赖关系
test_netorder	:	test_netorder.o IDL_AllTypes.dsc.o
	$(CC) -o $@ test_netorder.o IDL_AllTypes.dsc.o $(LFLAGS)

test_serialize_compact	:	test_serialize_compact.o IDL_AllTypes.dsc.o
	$(CC) -o $@ test_serialize_compact.o IDL_AllTypes.dsc.o $(LFLAGS)

test_serialize_compress	:	test_serialize_compress.o IDL_AllTypes.dsc.o
	$(CC) -o $@ test_serialize_compress.o IDL_AllTypes.dsc.o $(LFLAGS)

test_serialize_compress_press	:	test_serialize_compress_press.o IDL_AllTypes2.dsc.o
	$(CC) -o $@ test_serialize_compress_press.o IDL_AllTypes2.dsc.o $(LFLAGS)

test_trans	:	test_trans.o IDL_CommHead.dsc.o IDL_BankTransaction.dsc.o
	$(CC) -o $@ test_trans.o IDL_CommHead.dsc.o IDL_BankTransaction.dsc.o $(LFLAGS)

IDL_BankXmlTransaction.dsc.o	:	IDL_BankXmlTransaction.dsc.c
	$(CC) -I$(HOME)/exinc/fasterxml -I. -c IDL_BankXmlTransaction.dsc.c

test_serialize_xml	:	test_serialize_xml.o IDL_BankXmlTransaction.dsc.o
	$(CC) -o $@ test_serialize_xml.o IDL_BankXmlTransaction.dsc.o $(LFLAGS) -L/usr/local/lib -lfasterxml

test_serialize_json	:	test_serialize_json.o IDL_BankJsonTransaction.dsc.o
	$(CC) -o $@ test_serialize_json.o IDL_BankJsonTransaction.dsc.o $(LFLAGS) -L/usr/local/lib -lfasterjson

test_serialize_json_utf8	:	test_serialize_json_utf8.o IDL_BankJsonTransaction.dsc.o
	$(CC) -o $@ test_serialize_json_utf8.o IDL_BankJsonTransaction.dsc.o $(LFLAGS) -L/usr/local/lib -lfasterjson

press_deserialize_json	:	press_deserialize_json.o IDL_BankJsonTransaction.dsc.o
	$(CC) -o $@ press_deserialize_json.o IDL_BankJsonTransaction.dsc.o $(LFLAGS) -L/usr/local/lib -lfasterjson

ECP	=	ecpg

test_testable.o	:	test_testable.ec
	$(CC) -I/root/local/postgresql/include -E -x c test_testable.ec > test_testable.ecE
	$(ECP) -h test_testable.ecE -o test_testable.c
	sed -i 's/NULL/0/g' test_testable.c
	$(CC) -I/root/local/postgresql/include -c test_testable.c

IDL_testable.dsc.ESQL.o	:	IDL_testable.dsc.ESQL.ec
	$(CC) -I/root/local/postgresql/include -E -x c IDL_testable.dsc.ESQL.ec > IDL_testable.dsc.ESQL.ecE
	$(ECP) -h IDL_testable.dsc.ESQL.ecE -o IDL_testable.dsc.ESQL.c
	sed -i 's/NULL/0/g' IDL_testable.dsc.ESQL.c
	$(CC) -I/root/local/postgresql/include -c IDL_testable.dsc.ESQL.c

test_testable	:	IDL_testable.dsc.ESQL.o test_testable.o
	$(CC) -o $@ IDL_testable.dsc.ESQL.o test_testable.o $(LFLAGS) -L/root/local/postgresql/lib -lecpg

CLEAN_ADDITION	=	test_testable.ecE test_testable.c test_testable.o \
			IDL_testable.dsc.ESQL.ecE IDL_testable.dsc.ESQL.c IDL_testable.dsc.ESQL.o \

