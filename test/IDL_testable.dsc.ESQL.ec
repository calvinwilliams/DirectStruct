/* It had generated by DirectStruct v1.5.0 */

#include "IDL_testable.dsc.ESQL.eh"

EXEC SQL BEGIN DECLARE SECTION ;
	short testable_n2 ;	short testable_n2_id ;
	int testable_n4 ;	short testable_n4_id ;
	float testable_f4 ;	short testable_f4_id ;
	double testable_f8 ;	short testable_f8_id ;
	char testable_str32[ 32 + 1 ] ;	short testable_str32_id ;
	char testable_str1024[ 1024 + 1 ] ;	short testable_str1024_id ;
	char testable_b1 ;	short testable_b1_id ;
EXEC SQL END DECLARE SECTION ;

void DSCINITV_testable()
{
	testable_n2 = 0 ;
	testable_n2_id = 0 ;
	testable_n4 = 0 ;
	testable_n4_id = 0 ;
	testable_f4 = 0.0 ;
	testable_f4_id = 0 ;
	testable_f8 = 0.00 ;
	testable_f8_id = 0 ;
	memset( testable_str32 , 0x00 , sizeof(testable_str32) );
	testable_str32_id = 0 ;
	memset( testable_str1024 , 0x00 , sizeof(testable_str1024) );
	testable_str1024_id = 0 ;
	testable_b1 = 0 ;
	testable_b1_id = 0 ;
	return;
}

void DSCVTOS_testable( testable *pst )
{
	pst->n2 = testable_n2 ;
	pst->n4 = testable_n4 ;
	pst->f4 = testable_f4 ;
	pst->f8 = testable_f8 ;
	strcpy( pst->str32 , testable_str32 );
	strcpy( pst->str1024 , testable_str1024 );
	pst->b1 = testable_b1 ;
	return;
}

void DSCSTOV_testable( testable *pst )
{
	testable_n2 = pst->n2 ;
	testable_n4 = pst->n4 ;
	testable_f4 = pst->f4 ;
	testable_f8 = pst->f8 ;
	strcpy( testable_str32 , pst->str32 );
	strcpy( testable_str1024 , pst->str1024 );
	testable_b1 = pst->b1 ;
	return;
}

#ifndef TRIM
#define TRIM(_str_) {char *p=(_str_)+strlen(_str_)-1; for(;((*p)==' ')&&(p>=(_str_));p--){(*p)='\0';}}
#endif

void DSCTRIM_testable( testable *pst )
{
	TRIM( pst->str32 )
	TRIM( pst->str1024 )
	return;
}
