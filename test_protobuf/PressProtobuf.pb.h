// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PressProtobuf.proto

#ifndef PROTOBUF_PressProtobuf_2eproto__INCLUDED
#define PROTOBUF_PressProtobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PressProtobuf_2eproto();
void protobuf_AssignDesc_PressProtobuf_2eproto();
void protobuf_ShutdownFile_PressProtobuf_2eproto();

class PressProtobuf;

// ===================================================================

class PressProtobuf : public ::google::protobuf::Message {
 public:
  PressProtobuf();
  virtual ~PressProtobuf();
  
  PressProtobuf(const PressProtobuf& from);
  
  inline PressProtobuf& operator=(const PressProtobuf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PressProtobuf& default_instance();
  
  void Swap(PressProtobuf* other);
  
  // implements Message ----------------------------------------------
  
  PressProtobuf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PressProtobuf& from);
  void MergeFrom(const PressProtobuf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 n4 = 2;
  inline bool has_n4() const;
  inline void clear_n4();
  static const int kN4FieldNumber = 2;
  inline ::google::protobuf::int32 n4() const;
  inline void set_n4(::google::protobuf::int32 value);
  
  // required sint64 n8 = 3;
  inline bool has_n8() const;
  inline void clear_n8();
  static const int kN8FieldNumber = 3;
  inline ::google::protobuf::int64 n8() const;
  inline void set_n8(::google::protobuf::int64 value);
  
  // required int32 un4 = 5;
  inline bool has_un4() const;
  inline void clear_un4();
  static const int kUn4FieldNumber = 5;
  inline ::google::protobuf::int32 un4() const;
  inline void set_un4(::google::protobuf::int32 value);
  
  // required int64 un8 = 6;
  inline bool has_un8() const;
  inline void clear_un8();
  static const int kUn8FieldNumber = 6;
  inline ::google::protobuf::int64 un8() const;
  inline void set_un8(::google::protobuf::int64 value);
  
  // required float f4 = 7;
  inline bool has_f4() const;
  inline void clear_f4();
  static const int kF4FieldNumber = 7;
  inline float f4() const;
  inline void set_f4(float value);
  
  // required double f8 = 8;
  inline bool has_f8() const;
  inline void clear_f8();
  static const int kF8FieldNumber = 8;
  inline double f8() const;
  inline void set_f8(double value);
  
  // required string str32 = 9;
  inline bool has_str32() const;
  inline void clear_str32();
  static const int kStr32FieldNumber = 9;
  inline const ::std::string& str32() const;
  inline void set_str32(const ::std::string& value);
  inline void set_str32(const char* value);
  inline void set_str32(const char* value, size_t size);
  inline ::std::string* mutable_str32();
  
  // required string str1024 = 10;
  inline bool has_str1024() const;
  inline void clear_str1024();
  static const int kStr1024FieldNumber = 10;
  inline const ::std::string& str1024() const;
  inline void set_str1024(const ::std::string& value);
  inline void set_str1024(const char* value);
  inline void set_str1024(const char* value, size_t size);
  inline ::std::string* mutable_str1024();
  
  // @@protoc_insertion_point(class_scope:PressProtobuf)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 n4_;
  ::google::protobuf::int64 n8_;
  ::google::protobuf::int32 un4_;
  ::google::protobuf::int64 un8_;
  float f4_;
  double f8_;
  ::std::string* str32_;
  static const ::std::string _default_str32_;
  ::std::string* str1024_;
  static const ::std::string _default_str1024_;
  friend void  protobuf_AddDesc_PressProtobuf_2eproto();
  friend void protobuf_AssignDesc_PressProtobuf_2eproto();
  friend void protobuf_ShutdownFile_PressProtobuf_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PressProtobuf* default_instance_;
};
// ===================================================================


// ===================================================================

// PressProtobuf

// required sint32 n4 = 2;
inline bool PressProtobuf::has_n4() const {
  return _has_bit(0);
}
inline void PressProtobuf::clear_n4() {
  n4_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 PressProtobuf::n4() const {
  return n4_;
}
inline void PressProtobuf::set_n4(::google::protobuf::int32 value) {
  _set_bit(0);
  n4_ = value;
}

// required sint64 n8 = 3;
inline bool PressProtobuf::has_n8() const {
  return _has_bit(1);
}
inline void PressProtobuf::clear_n8() {
  n8_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 PressProtobuf::n8() const {
  return n8_;
}
inline void PressProtobuf::set_n8(::google::protobuf::int64 value) {
  _set_bit(1);
  n8_ = value;
}

// required int32 un4 = 5;
inline bool PressProtobuf::has_un4() const {
  return _has_bit(2);
}
inline void PressProtobuf::clear_un4() {
  un4_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 PressProtobuf::un4() const {
  return un4_;
}
inline void PressProtobuf::set_un4(::google::protobuf::int32 value) {
  _set_bit(2);
  un4_ = value;
}

// required int64 un8 = 6;
inline bool PressProtobuf::has_un8() const {
  return _has_bit(3);
}
inline void PressProtobuf::clear_un8() {
  un8_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 PressProtobuf::un8() const {
  return un8_;
}
inline void PressProtobuf::set_un8(::google::protobuf::int64 value) {
  _set_bit(3);
  un8_ = value;
}

// required float f4 = 7;
inline bool PressProtobuf::has_f4() const {
  return _has_bit(4);
}
inline void PressProtobuf::clear_f4() {
  f4_ = 0;
  _clear_bit(4);
}
inline float PressProtobuf::f4() const {
  return f4_;
}
inline void PressProtobuf::set_f4(float value) {
  _set_bit(4);
  f4_ = value;
}

// required double f8 = 8;
inline bool PressProtobuf::has_f8() const {
  return _has_bit(5);
}
inline void PressProtobuf::clear_f8() {
  f8_ = 0;
  _clear_bit(5);
}
inline double PressProtobuf::f8() const {
  return f8_;
}
inline void PressProtobuf::set_f8(double value) {
  _set_bit(5);
  f8_ = value;
}

// required string str32 = 9;
inline bool PressProtobuf::has_str32() const {
  return _has_bit(6);
}
inline void PressProtobuf::clear_str32() {
  if (str32_ != &_default_str32_) {
    str32_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& PressProtobuf::str32() const {
  return *str32_;
}
inline void PressProtobuf::set_str32(const ::std::string& value) {
  _set_bit(6);
  if (str32_ == &_default_str32_) {
    str32_ = new ::std::string;
  }
  str32_->assign(value);
}
inline void PressProtobuf::set_str32(const char* value) {
  _set_bit(6);
  if (str32_ == &_default_str32_) {
    str32_ = new ::std::string;
  }
  str32_->assign(value);
}
inline void PressProtobuf::set_str32(const char* value, size_t size) {
  _set_bit(6);
  if (str32_ == &_default_str32_) {
    str32_ = new ::std::string;
  }
  str32_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PressProtobuf::mutable_str32() {
  _set_bit(6);
  if (str32_ == &_default_str32_) {
    str32_ = new ::std::string;
  }
  return str32_;
}

// required string str1024 = 10;
inline bool PressProtobuf::has_str1024() const {
  return _has_bit(7);
}
inline void PressProtobuf::clear_str1024() {
  if (str1024_ != &_default_str1024_) {
    str1024_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& PressProtobuf::str1024() const {
  return *str1024_;
}
inline void PressProtobuf::set_str1024(const ::std::string& value) {
  _set_bit(7);
  if (str1024_ == &_default_str1024_) {
    str1024_ = new ::std::string;
  }
  str1024_->assign(value);
}
inline void PressProtobuf::set_str1024(const char* value) {
  _set_bit(7);
  if (str1024_ == &_default_str1024_) {
    str1024_ = new ::std::string;
  }
  str1024_->assign(value);
}
inline void PressProtobuf::set_str1024(const char* value, size_t size) {
  _set_bit(7);
  if (str1024_ == &_default_str1024_) {
    str1024_ = new ::std::string;
  }
  str1024_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PressProtobuf::mutable_str1024() {
  _set_bit(7);
  if (str1024_ == &_default_str1024_) {
    str1024_ = new ::std::string;
  }
  return str1024_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PressProtobuf_2eproto__INCLUDED
