// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PressProtobuf.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PressProtobuf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PressProtobuf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PressProtobuf_2eproto() {
  protobuf_AddDesc_PressProtobuf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PressProtobuf.proto");
  GOOGLE_CHECK(file != NULL);
  PressProtobuf_descriptor_ = file->message_type(0);
  static const int PressProtobuf_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressProtobuf, n4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressProtobuf, n8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressProtobuf, un4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressProtobuf, un8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressProtobuf, f4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressProtobuf, f8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressProtobuf, str32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressProtobuf, str1024_),
  };
  PressProtobuf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PressProtobuf_descriptor_,
      PressProtobuf::default_instance_,
      PressProtobuf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressProtobuf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressProtobuf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PressProtobuf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PressProtobuf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PressProtobuf_descriptor_, &PressProtobuf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PressProtobuf_2eproto() {
  delete PressProtobuf::default_instance_;
  delete PressProtobuf_reflection_;
}

void protobuf_AddDesc_PressProtobuf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023PressProtobuf.proto\"y\n\rPressProtobuf\022\n"
    "\n\002n4\030\002 \002(\021\022\n\n\002n8\030\003 \002(\022\022\013\n\003un4\030\005 \002(\005\022\013\n\003u"
    "n8\030\006 \002(\003\022\n\n\002f4\030\007 \002(\002\022\n\n\002f8\030\010 \002(\001\022\r\n\005str3"
    "2\030\t \002(\t\022\017\n\007str1024\030\n \002(\t", 144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PressProtobuf.proto", &protobuf_RegisterTypes);
  PressProtobuf::default_instance_ = new PressProtobuf();
  PressProtobuf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PressProtobuf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PressProtobuf_2eproto {
  StaticDescriptorInitializer_PressProtobuf_2eproto() {
    protobuf_AddDesc_PressProtobuf_2eproto();
  }
} static_descriptor_initializer_PressProtobuf_2eproto_;


// ===================================================================

const ::std::string PressProtobuf::_default_str32_;
const ::std::string PressProtobuf::_default_str1024_;
#ifndef _MSC_VER
const int PressProtobuf::kN4FieldNumber;
const int PressProtobuf::kN8FieldNumber;
const int PressProtobuf::kUn4FieldNumber;
const int PressProtobuf::kUn8FieldNumber;
const int PressProtobuf::kF4FieldNumber;
const int PressProtobuf::kF8FieldNumber;
const int PressProtobuf::kStr32FieldNumber;
const int PressProtobuf::kStr1024FieldNumber;
#endif  // !_MSC_VER

PressProtobuf::PressProtobuf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PressProtobuf::InitAsDefaultInstance() {
}

PressProtobuf::PressProtobuf(const PressProtobuf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PressProtobuf::SharedCtor() {
  _cached_size_ = 0;
  n4_ = 0;
  n8_ = GOOGLE_LONGLONG(0);
  un4_ = 0;
  un8_ = GOOGLE_LONGLONG(0);
  f4_ = 0;
  f8_ = 0;
  str32_ = const_cast< ::std::string*>(&_default_str32_);
  str1024_ = const_cast< ::std::string*>(&_default_str1024_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PressProtobuf::~PressProtobuf() {
  SharedDtor();
}

void PressProtobuf::SharedDtor() {
  if (str32_ != &_default_str32_) {
    delete str32_;
  }
  if (str1024_ != &_default_str1024_) {
    delete str1024_;
  }
  if (this != default_instance_) {
  }
}

void PressProtobuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PressProtobuf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PressProtobuf_descriptor_;
}

const PressProtobuf& PressProtobuf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PressProtobuf_2eproto();  return *default_instance_;
}

PressProtobuf* PressProtobuf::default_instance_ = NULL;

PressProtobuf* PressProtobuf::New() const {
  return new PressProtobuf;
}

void PressProtobuf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    n4_ = 0;
    n8_ = GOOGLE_LONGLONG(0);
    un4_ = 0;
    un8_ = GOOGLE_LONGLONG(0);
    f4_ = 0;
    f8_ = 0;
    if (_has_bit(6)) {
      if (str32_ != &_default_str32_) {
        str32_->clear();
      }
    }
    if (_has_bit(7)) {
      if (str1024_ != &_default_str1024_) {
        str1024_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PressProtobuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 n4 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &n4_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_n8;
        break;
      }
      
      // required sint64 n8 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &n8_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_un4;
        break;
      }
      
      // required int32 un4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_un4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un4_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_un8;
        break;
      }
      
      // required int64 un8 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_un8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &un8_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_f4;
        break;
      }
      
      // required float f4 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_f4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f4_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_f8;
        break;
      }
      
      // required double f8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_f8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f8_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_str32;
        break;
      }
      
      // required string str32 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str32()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str32().data(), this->str32().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_str1024;
        break;
      }
      
      // required string str1024 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str1024:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str1024()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str1024().data(), this->str1024().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PressProtobuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 n4 = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->n4(), output);
  }
  
  // required sint64 n8 = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->n8(), output);
  }
  
  // required int32 un4 = 5;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->un4(), output);
  }
  
  // required int64 un8 = 6;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->un8(), output);
  }
  
  // required float f4 = 7;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->f4(), output);
  }
  
  // required double f8 = 8;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->f8(), output);
  }
  
  // required string str32 = 9;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str32().data(), this->str32().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->str32(), output);
  }
  
  // required string str1024 = 10;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1024().data(), this->str1024().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->str1024(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PressProtobuf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 n4 = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->n4(), target);
  }
  
  // required sint64 n8 = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->n8(), target);
  }
  
  // required int32 un4 = 5;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->un4(), target);
  }
  
  // required int64 un8 = 6;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->un8(), target);
  }
  
  // required float f4 = 7;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->f4(), target);
  }
  
  // required double f8 = 8;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->f8(), target);
  }
  
  // required string str32 = 9;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str32().data(), this->str32().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->str32(), target);
  }
  
  // required string str1024 = 10;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1024().data(), this->str1024().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->str1024(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PressProtobuf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 n4 = 2;
    if (has_n4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->n4());
    }
    
    // required sint64 n8 = 3;
    if (has_n8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->n8());
    }
    
    // required int32 un4 = 5;
    if (has_un4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un4());
    }
    
    // required int64 un8 = 6;
    if (has_un8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->un8());
    }
    
    // required float f4 = 7;
    if (has_f4()) {
      total_size += 1 + 4;
    }
    
    // required double f8 = 8;
    if (has_f8()) {
      total_size += 1 + 8;
    }
    
    // required string str32 = 9;
    if (has_str32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str32());
    }
    
    // required string str1024 = 10;
    if (has_str1024()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str1024());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PressProtobuf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PressProtobuf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PressProtobuf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PressProtobuf::MergeFrom(const PressProtobuf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_n4(from.n4());
    }
    if (from._has_bit(1)) {
      set_n8(from.n8());
    }
    if (from._has_bit(2)) {
      set_un4(from.un4());
    }
    if (from._has_bit(3)) {
      set_un8(from.un8());
    }
    if (from._has_bit(4)) {
      set_f4(from.f4());
    }
    if (from._has_bit(5)) {
      set_f8(from.f8());
    }
    if (from._has_bit(6)) {
      set_str32(from.str32());
    }
    if (from._has_bit(7)) {
      set_str1024(from.str1024());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PressProtobuf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PressProtobuf::CopyFrom(const PressProtobuf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PressProtobuf::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void PressProtobuf::Swap(PressProtobuf* other) {
  if (other != this) {
    std::swap(n4_, other->n4_);
    std::swap(n8_, other->n8_);
    std::swap(un4_, other->un4_);
    std::swap(un8_, other->un8_);
    std::swap(f4_, other->f4_);
    std::swap(f8_, other->f8_);
    std::swap(str32_, other->str32_);
    std::swap(str1024_, other->str1024_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PressProtobuf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PressProtobuf_descriptor_;
  metadata.reflection = PressProtobuf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
